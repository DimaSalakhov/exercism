<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1417869991579">{:repl-history {:ide [], :local [&quot;(source proxy)&quot; &quot;((fn [s]\n   (re-seq #\&quot;[A-Z]?[a-z]+\&quot; s)) \&quot;multiWordKey\&quot;)&quot; &quot;((fn [s]\n   (join \&quot;-\&quot; (map clojure.string/lower-case (re-seq #\&quot;[A-Z]?[a-z]+\&quot; s)))) \&quot;multiWordKey\&quot;)&quot; &quot;((fn [s]\n   (clojure.string/join \&quot;-\&quot; (map clojure.string/lower-case (re-seq #\&quot;[A-Z]?[a-z]+\&quot; s)))) \&quot;multiWordKey\&quot;)&quot; &quot;((fn [s]\n   (re-seq #\&quot;-\&quot; s)) \&quot;multi-word-key\&quot;)&quot; &quot;((fn [s]\n   (re-seq #\&quot;\\w+\&quot; s)) \&quot;multi-word-key\&quot;)&quot; &quot;((fn [s]\n    (let [items (re-seq #\&quot;\\w+\&quot; s)] (reduce #(str %1 (clojure.string/capitalize %2 ) ) (first items) (rest items)))) \&quot;multi-word-key\&quot;)&quot; &quot;(leap/leap-year? 101)&quot; &quot;(leap/leap-year? 100)&quot; &quot;(leap/leap-year? 400)&quot; &quot;(leap/leap-year? 1900)&quot; &quot;(rem 1996 100)&quot; &quot;(rem 1996 4)&quot; &quot;(leap/leap-year? 1996)&quot; &quot;(or (false) (true))&quot; &quot;(or false true)&quot; &quot;(= 0 (rem 1996 400))&quot; &quot;(= 0 (rem 1996 4))&quot; &quot;(&gt; 0 (rem 1996 100))&quot; &quot;(doc {})&quot; &quot;(etl/transform {1 [\&quot;APPLE\&quot; \&quot;ARTICHOKE\&quot;] 2 [\&quot;BOAT\&quot; \&quot;BALLERINA\&quot;] })&quot; &quot;(meetup/meetup)&quot; &quot;(meetup/meetup 2013 3)&quot; &quot;(apply str (map dna-to-rna-map \&quot;XCGFGGTDTTAA\&quot;))&quot; &quot;(apply str (map {\\G \\C, \\C \\G, \\T \\A, \\A \\U} \&quot;XCGFGGTDTTAA\&quot;))&quot; &quot;(map {\\G \\C, \\C \\G, \\T \\A, \\A \\U} \&quot;XCGFGGTDTTAA\&quot;)&quot; &quot;(clojure.string/lower-case \&quot;1, 2\&quot;)&quot; &quot;(run-tests)&quot; &quot;(use 'clojure.test)&quot; &quot;(use 'bob)&quot; &quot;(use 'app.bob)&quot; &quot;(pst)&quot; &quot;(run-all-tests)&quot; &quot;where&quot; &quot;(lein test)&quot; &quot;lein test&quot; &quot;(run-tests 'app.bob)&quot; &quot;(load-file \&quot;src/app/bob/bob_test.clj\&quot;)&quot; &quot;(re-seq #\&quot;\\w+\&quot; \&quot;car : carpet as java : javascript!!&amp;@$%^&amp;\&quot;)&quot; &quot;(re-seq #\&quot;\\[a-zA-Z]+\&quot; \&quot;testing, 1, 2 testing\&quot;)&quot; &quot;(re-seq #\&quot;[a-zA-Z]+\&quot; \&quot;testing, 1, 2 testing\&quot;)&quot; &quot;(re-seq #\&quot;\\w\&quot; \&quot;testing, 1, 2 testing\&quot;)&quot; &quot;(re-seq #\&quot;\\w+\&quot; \&quot;testing, 1, 2 testing\&quot;)&quot; &quot;(frequencies (re-seq #\&quot;\\w+\&quot; \&quot;testing, 1, 2 testing\&quot;))&quot; &quot;(lower-case \&quot;sdfsd SDFs sdf\&quot;)&quot; &quot;(clojure.string/lower-case \&quot;sdfsd SDFs sdf\&quot;)&quot; &quot;( filter #(= (sort %) (sort \&quot;olleh\&quot;)) [\&quot;hello\&quot; \&quot;world\&quot; \&quot;zombies\&quot; \&quot;pants\&quot;])&quot; &quot;( filter #(= (sort %) (sort \&quot;galea\&quot;)) [\&quot;eagle\&quot;])&quot; &quot;((fn anagrams-for [word candidates]\n  (let [sorted-word (sort word)]\n    filter #(= sorted-word (sort %)) candidates)) \&quot;galea\&quot; [\&quot;eagle\&quot;])&quot; &quot;((defn anagrams-for [word candidates]\n  (let [sorted-word (sort (clojure.string/lower-case word))]\n    (filter #(= sorted-word (sort (clojure.string/lower-case %))) candidates))) \&quot;banana\&quot; [\&quot;banana\&quot;])&quot; &quot;(#(and (re-find #\&quot;[A-Z]\&quot; %)\n      (re-find #\&quot;[a-z]\&quot; %)) \&quot;Ending with ? means a question.\&quot;)&quot; &quot;(true? (#(and (re-find #\&quot;[A-Z]\&quot; %)\n      (re-find #\&quot;[a-z]\&quot; %)) \&quot;Ending with ? means a question.\&quot;))&quot; &quot;(meetup/meetup 2013 4)&quot; &quot;(meetup/meetup 2014 11)&quot; &quot;(meetup/meetup 2014 10)&quot; &quot;(meetup/meetup 2014 12)&quot; &quot;(meetup/meetup 2014 12 1)&quot; &quot;(meetup/meetup 2014 12 2)&quot; &quot;(meetup/meetup 2014 12 3)&quot; &quot;(meetup/meetup 2014 11 1)&quot; &quot;(meetup/meetup 2014 11 4)&quot; &quot;(meetup/meetup 2014 11 5)&quot; &quot;(meetup/meetup 2014 11 2)&quot; &quot;(meetup/meetup 2013 11 1)&quot; &quot;(meetup/days-of-the-week 1)&quot; &quot;(meetup/days-of-the-week :sunday)&quot; &quot;(meetup/meetup 12 2013 :friday :first)&quot;], :remote []}}</component>
</project>