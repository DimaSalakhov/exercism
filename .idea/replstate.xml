<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1417140229846">{:repl-history {:ide [], :local [&quot;(apply str (map dna-to-rna-map \&quot;XCGFGGTDTTAA\&quot;))&quot; &quot;(apply str (map {\\G \\C, \\C \\G, \\T \\A, \\A \\U} \&quot;XCGFGGTDTTAA\&quot;))&quot; &quot;(map {\\G \\C, \\C \\G, \\T \\A, \\A \\U} \&quot;XCGFGGTDTTAA\&quot;)&quot; &quot;(clojure.string/lower-case \&quot;1, 2\&quot;)&quot; &quot;(run-tests)&quot; &quot;(use 'clojure.test)&quot; &quot;(use 'bob)&quot; &quot;(use 'app.bob)&quot; &quot;(pst)&quot; &quot;(run-all-tests)&quot; &quot;where&quot; &quot;(lein test)&quot; &quot;lein test&quot; &quot;(run-tests 'app.bob)&quot; &quot;(load-file \&quot;src/app/bob/bob_test.clj\&quot;)&quot; &quot;(re-seq #\&quot;\\w+\&quot; \&quot;car : carpet as java : javascript!!&amp;@$%^&amp;\&quot;)&quot; &quot;(re-seq #\&quot;\\[a-zA-Z]+\&quot; \&quot;testing, 1, 2 testing\&quot;)&quot; &quot;(re-seq #\&quot;[a-zA-Z]+\&quot; \&quot;testing, 1, 2 testing\&quot;)&quot; &quot;(re-seq #\&quot;\\w\&quot; \&quot;testing, 1, 2 testing\&quot;)&quot; &quot;(re-seq #\&quot;\\w+\&quot; \&quot;testing, 1, 2 testing\&quot;)&quot; &quot;(frequencies (re-seq #\&quot;\\w+\&quot; \&quot;testing, 1, 2 testing\&quot;))&quot; &quot;(lower-case \&quot;sdfsd SDFs sdf\&quot;)&quot; &quot;(clojure.string/lower-case \&quot;sdfsd SDFs sdf\&quot;)&quot; &quot;( filter #(= (sort %) (sort \&quot;olleh\&quot;)) [\&quot;hello\&quot; \&quot;world\&quot; \&quot;zombies\&quot; \&quot;pants\&quot;])&quot; &quot;( filter #(= (sort %) (sort \&quot;galea\&quot;)) [\&quot;eagle\&quot;])&quot; &quot;((fn anagrams-for [word candidates]\n  (let [sorted-word (sort word)]\n    filter #(= sorted-word (sort %)) candidates)) \&quot;galea\&quot; [\&quot;eagle\&quot;])&quot; &quot;((defn anagrams-for [word candidates]\n  (let [sorted-word (sort (clojure.string/lower-case word))]\n    (filter #(= sorted-word (sort (clojure.string/lower-case %))) candidates))) \&quot;banana\&quot; [\&quot;banana\&quot;])&quot; &quot;(#(and (re-find #\&quot;[A-Z]\&quot; %)\n      (re-find #\&quot;[a-z]\&quot; %)) \&quot;Ending with ? means a question.\&quot;)&quot; &quot;(true? (#(and (re-find #\&quot;[A-Z]\&quot; %)\n      (re-find #\&quot;[a-z]\&quot; %)) \&quot;Ending with ? means a question.\&quot;))&quot;], :remote []}}</component>
</project>